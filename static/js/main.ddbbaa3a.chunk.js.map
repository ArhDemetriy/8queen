{"version":3,"sources":["chessTable/ChessTable.tsx","queen/Queen.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChessTable","props","table","i","queenPositions","length","position","push","className","map","point","Math","random","Queen","adder","DSC","horizontals","leftDiagonals","rightDiagonals","sendTable","results","this","Array","fill","searchSpace","j","save","newResult","concat","App","queen","state","tables","el","id","addTable","bind","setTimeout","setState","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAMe,SAASA,EAAWC,GAGjC,IAFA,IAAMC,EAAQ,GAELC,EAAI,EAAGA,EAAIF,EAAMG,eAAeC,OAAQF,IAAK,CAAC,IAAD,gBAC7BF,EAAMG,gBADuB,IACpD,2BAA6C,CAAC,IAAnCE,EAAkC,QAC3CJ,EAAMK,KAAKJ,GAAKG,IAFkC,+BAMtD,OAAO,qBAAKE,UAAU,aAAf,SACLN,EAAMO,KAAI,SAAAC,GAAK,OAAI,qBACjBF,UAAS,2BAAsBE,EAAQ,0BAA4B,IADlD,SAGfA,EAAQ,QAAU,IADfC,KAAKC,e,ICwCDC,E,WAzDb,WAAYC,GAA4C,yBAcvCC,IAAM,EAdgC,KAe/Cb,WAf+C,OAgB/Cc,iBAhB+C,OAiB/CC,mBAjB+C,OAkB/CC,oBAlB+C,OAiDtCC,eAjDsC,OAkDtCC,QAA4B,GAjD3CC,KAAKF,UAAYL,EAEjBO,KAAKnB,MAAQoB,MAAM,GAAGC,MAAM,GAC5BF,KAAKL,YAAcM,MAAM,GAAGC,MAAK,GACjCF,KAAKJ,cAAgBK,MAAM,IAAIC,MAAK,GACpCF,KAAKH,eAAiBI,MAAM,IAAIC,MAAK,GAErCF,KAAKG,YAAY,G,6CAGnB,WACE,OAAOH,KAAKD,U,yBAQd,SAAoBjB,GAClB,IAAK,IAAIsB,EAAI,EAAGA,EAAIJ,KAAKN,IAAKU,IACxBJ,KAAKL,YAAYS,IAChBJ,KAAKJ,cAAcd,EAAIsB,IACvBJ,KAAKH,eAAef,EAAIsB,EAAIJ,KAAKN,IAAM,KAG1CM,KAAKnB,MAAMC,GAAKsB,EAEhBJ,KAAKL,YAAYS,GACfJ,KAAKJ,cAAcd,EAAIsB,GACvBJ,KAAKH,eAAef,EAAIsB,EAAIJ,KAAKN,IAAM,IACvC,EAEAZ,GAAKkB,KAAKN,IAAM,EAClBM,KAAKK,OAELL,KAAKG,YAAYrB,EAAI,GAGvBkB,KAAKnB,MAAMC,IAAM,EAEjBkB,KAAKL,YAAYS,GACfJ,KAAKJ,cAAcd,EAAIsB,GACvBJ,KAAKH,eAAef,EAAIsB,EAAIJ,KAAKN,IAAM,IACvC,K,kBAMN,WACE,IAAMY,EAAa,GAAWC,OAAOP,KAAKnB,OAC1CmB,KAAKD,QAAQb,KAAKoB,GAClBN,KAAKF,UAAUQ,O,KC3CEE,E,kDACnB,WAAY5B,GAAc,IAAD,8BACvB,cAAMA,IAqBA6B,WAtBiB,EAEvB,EAAKC,MAAQ,CAAEC,OAAQ,IAFA,E,0CAIzB,WACE,OACE,sBAAKxB,UAAU,MAAf,UACE,gJAC0Ba,KAAKU,MAAMC,OAAO3B,UAE3CgB,KAAKU,MAAMC,OACTvB,KAAI,SAAAwB,GAAE,OAAI,cAAC,EAAD,CACT7B,eAAgB6B,EAAG/B,OACd+B,EAAGC,Y,+BAIlB,WACOb,KAAKS,QACRT,KAAKS,MAAQ,IAAIjB,EAAMQ,KAAKc,SAASC,KAAKf,U,sBAK9C,SAAiBnB,GAA2C,IAAD,OACzDmB,KAAKU,MAAMC,OAAOzB,KAAK,CACrBL,QACAgC,GAAIvB,KAAKC,WAEXyB,YAAW,WACT,EAAKC,SAAS,EAAKP,SAClB,O,GAhC0BQ,IAAMC,WCExBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ddbbaa3a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ChessTable.css'\r\n\r\nexport interface ChessTableProps{\r\n  queenPositions: number[]\r\n}\r\nexport default function ChessTable(props: ChessTableProps) {\r\n  const table = [] as boolean[]\r\n\r\n  for (let i = 0; i < props.queenPositions.length; i++) {\r\n    for (const position of props.queenPositions) {\r\n      table.push(i == position)\r\n    }\r\n  }\r\n\r\n  return <div className='ChessTable'>{\r\n    table.map(point => <div\r\n      className={`ChessTable__item ${point ? 'ChessTable__item--queen' : ''}`}\r\n      key={Math.random()} >{\r\n        point ? 'queen' : ''\r\n      }</div>\r\n    )\r\n  }</div>\r\n\r\n}\r\n\r\n","class Queen{\r\n  constructor(adder: (newTable: Queen['table']) => void) {\r\n    this.sendTable = adder\r\n\r\n    this.table = Array(8).fill(-1) as Queen['table']\r\n    this.horizontals = Array(8).fill(false) as Queen['horizontals']\r\n    this.leftDiagonals = Array(15).fill(false) as Queen['leftDiagonals']\r\n    this.rightDiagonals = Array(15).fill(false) as Queen['rightDiagonals']\r\n\r\n    this.searchSpace(0)\r\n  }\r\n\r\n  getQueens() {\r\n    return this.results\r\n  }\r\n  private readonly DSC = 8\r\n  private table: [number, number, number, number, number, number, number, number]\r\n  private horizontals: [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean]\r\n  private leftDiagonals: [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean]\r\n  private rightDiagonals: Queen['leftDiagonals']\r\n\r\n  private searchSpace(i: number) {\r\n    for (let j = 0; j < this.DSC; j++) {\r\n      if (this.horizontals[j]\r\n        || this.leftDiagonals[i + j]\r\n        || this.rightDiagonals[i - j + this.DSC - 1]\r\n        ) { continue }\r\n        // save queen positions\r\n        this.table[i] = j\r\n        // save warning rows\r\n        this.horizontals[j]\r\n        = this.leftDiagonals[i + j]\r\n        = this.rightDiagonals[i - j + this.DSC - 1]\r\n        = true\r\n\r\n      if (i >= this.DSC - 1) {\r\n        this.save()\r\n      } else {\r\n        this.searchSpace(i + 1)\r\n      }\r\n\r\n      this.table[i] = -1\r\n\r\n      this.horizontals[j]\r\n      = this.leftDiagonals[i + j]\r\n      = this.rightDiagonals[i - j + this.DSC - 1]\r\n      = false\r\n    }\r\n  }\r\n\r\n  private readonly sendTable: (newTable: Queen['table']) => void\r\n  private readonly results: Queen['table'][] = []\r\n  private save() {\r\n    const newResult = ([] as any).concat(this.table) as Queen['table']\r\n    this.results.push(newResult)\r\n    this.sendTable(newResult)\r\n  }\r\n}\r\nexport default Queen\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ChessTable from \"./chessTable/ChessTable\";\r\nimport Queen from \"./queen/Queen\";\r\n\r\ninterface AppState{\r\n  tables: {\r\n    table: ReturnType<Queen['getQueens']>[0]\r\n    id: number\r\n  }[]\r\n}\r\n\r\nexport default class App extends React.Component<{}, AppState> {\r\n  constructor(props?: any) {\r\n    super(props)\r\n    this.state = { tables: [] }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h3>\r\n          {`количество решений: ${this.state.tables.length}`}\r\n        </h3>\r\n        {this.state.tables\r\n          .map(el => <ChessTable\r\n            queenPositions={el.table}\r\n            key={el.id} />)}\r\n      </div>\r\n      );\r\n    }\r\n  componentDidMount() {\r\n    if (!this.queen) {\r\n      this.queen = new Queen(this.addTable.bind(this))\r\n    }\r\n  }\r\n  private queen?: Queen\r\n\r\n  private addTable(table: ReturnType<Queen['getQueens']>[0]) {\r\n    this.state.tables.push({\r\n      table,\r\n      id: Math.random()\r\n    })\r\n    setTimeout(() => {\r\n      this.setState(this.state)\r\n    }, 0);\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}